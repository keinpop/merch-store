// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package user is a generated GoMock package.
package user

import (
	types "proj/internal/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockUserRepo) Authorize(login, password string) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", login, password)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockUserRepoMockRecorder) Authorize(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockUserRepo)(nil).Authorize), login, password)
}

// BuyItem mocks base method.
func (m *MockUserRepo) BuyItem(userID, itemTitle string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", userID, itemTitle)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockUserRepoMockRecorder) BuyItem(userID, itemTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockUserRepo)(nil).BuyItem), userID, itemTitle)
}

// Info mocks base method.
func (m *MockUserRepo) Info(userID string) (types.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", userID)
	ret0, _ := ret[0].(types.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockUserRepoMockRecorder) Info(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockUserRepo)(nil).Info), userID)
}

// SendCoin mocks base method.
func (m *MockUserRepo) SendCoin(userID, toUserLogin string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", userID, toUserLogin, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockUserRepoMockRecorder) SendCoin(userID, toUserLogin, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockUserRepo)(nil).SendCoin), userID, toUserLogin, amount)
}
